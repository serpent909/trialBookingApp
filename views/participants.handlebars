<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Participants</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
  <link rel="stylesheet" href="/css/form.css">
  <link rel="stylesheet" href="/css/table.css">
  <style>
    td {
      cursor: pointer;
      transition: background-color 0.2s;
    }

    td:hover {
      background-color: #4287F5;
    }
  </style>
</head>

<body>
  <h1>Participants</h1>

  <table>
    <thead>
      <tr>
        <th>Participant</th>
        <th>Apt. 1</th>
        <th>Apt. 2</th>
        <th>Apt. 3</th>
        <th>Apt. 4</th>
        <th>Apt. 5</th>
        <th>Apt. 6</th>
        <th>Apt. 7</th>
        <th>Apt. 8</th>
      </tr>
    </thead>
    <tbody>
      {{#each arrangedData}}
      <tr>
        <td class="participantData">{{participantId}}</td>
        {{#each appointments}}
        <td id="participantData" data-participant-id="{{../participantId}}"
          data-appointment-number="{{indexPlusOne @index}}" data-appointment-id="{{this.appointmentId}}"
          class="{{#if this.startTime}}booked{{else}}open{{/if}}">
          {{#if this.startTime}}
          {{formatTime this.startTime}}
          {{/if}}
        </td>
        {{/each}}
      </tr>
      {{/each}}
    </tbody>
  </table>

  <!-- The booking form, hidden inside a modal -->
  <div id="booking-modal" style="display: none;">
    <form id="appointmentForm">
      <label for="participantNumber">Participant ID:</label>
      <select id="participantNumber" name="participantNumber" required>
        <option value="">Select Participant</option>
        {{#each participant_ids}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>

      <label for="appointmentNumber">Appointment Number:</label>
      <select id="appointmentNumber" name="appointmentNumber" required>
        <option value="">Select Appointment Number</option>
        {{#each appointment_numbers}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>

      <label for="startDate">Start Date</label>
      <input type="date" id="startDate" name="startDate">

      <label for="endDate">End Date</label>
      <input type="date" id="endDate" name="endDate">

      <label for="researcherName">Researcher</label>
      <select id="researcherName" name="researcherName">
        <option value="">Select Researcher</option>
        {{#each dropDownOptions.researcherNames}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>

      <label for="psychologistName">Psychologist</label>
      <select id="psychologistName" name="psychologistName">
        <option value="">Select Psychologist</option>
        {{#each dropDownOptions.psychologistNames}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>

      <label for="roomName">Room</label>
      <select id="roomName" name="roomName">
        <option value="">Select Room</option>
        {{#each dropDownOptions.roomNames}}
        <option value="{{this}}">{{this}}</option>
        {{/each}}
      </select>

      <button type="submit">Search for appointment</button>
    </form>
  </div>

  <!-- The existing booking modal, hidden inside a modal -->
  <div id="existing-booking-modal" style="display: none;">
    <!-- Details of the existing booking -->
    <h3 id="existing-booking-details"></h3>
    <p id="existing-booking-id"></p>

    <button onclick="closeExistingModal()">Close</button>
    <button id="deleteAppointmentButton">Delete Appointment</button>
  </div>

  <div id="overlay"></div>

  <script>




    function openModal() {
      document.getElementById('booking-modal').style.display = 'block';
      document.getElementById('overlay').style.display = 'block';
    }

    function closeModal() {
      document.getElementById('booking-modal').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';
    }

    // Close function for the existing booking modal
    function closeExistingModal() {
      document.getElementById('existing-booking-modal').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';
    }

    function deleteAppointment(appointmentId) {
      let appointmentIdElement = document.getElementById('existing-booking-id');
      let appointmentToDeleteId = appointmentIdElement.textContent.split(': ')[1];

      fetch('/appointments/' + appointmentId, {
        method: 'DELETE',
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          console.log('Success:', data);
          closeExistingModal();
          window.location.reload(); // reload the page to reflect changes
        })
        .catch((error) => {
          alert('There was an error. Please try again.');
        });
    }

    // Cell click event listener
    document.querySelectorAll('td').forEach((td, index) => {
      if ((index + 1) % 9 !== 1) {
        td.addEventListener('click', async function () {

          const participantId = this.dataset.participantId;
          const appointmentNumber = this.dataset.appointmentNumber;
          const appointmentId = this.dataset.appointmentId;
          const startTime = this.textContent.trim();




          if (startTime) {
            // Get the appointment details
            const deleteAppointmentButton = document.getElementById('deleteAppointmentButton');
            deleteAppointmentButton.dataset.appointmentId = appointmentId;
            document.getElementById('booking-modal').style.display = 'none';
            document.getElementById('existing-booking-details').textContent = startTime;
            document.getElementById('existing-booking-id').innerHTML = `Appointment ID: ${appointmentId}`
            document.getElementById('existing-booking-modal').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
            const appointmentDetailsArray = await getAppointmentDetails();
            const container = document.getElementById('existing-booking-id');


            appointmentDetailsArray.forEach(detail => {
              const pElementType = document.createElement('p');
              const pElementTime = document.createElement('p');
              const brElement = document.createElement('br');
              pElementType.textContent = `${detail.booked_name}`
              pElementType.style.fontWeight = 'bold';
              pElementType.style.marginBottom = '0px';
              pElementTime.style.marginTop = '0px';
              pElementTime.textContent = `${detail.start_time.split(' ')[1]} - ${detail.end_time.split(' ')[1]}`;
              container.appendChild(pElementType);
              container.appendChild(pElementTime);

            });
          } else {
            // Hide existing booking modal in case it's displayed
            document.getElementById('existing-booking-modal').style.display = 'none';
            document.getElementById('participantNumber').value = participantId;
            document.getElementById('appointmentNumber').value = appointmentNumber;
            openModal();
          }

        });
      } else {
        td.classList.add('not-clickable')
      }
    });

    document.getElementById('deleteAppointmentButton').addEventListener('click', function () {
      const appointmentId = this.dataset.appointmentId;
      deleteAppointment(appointmentId);
    });

    document.getElementById('overlay').addEventListener('click', closeModal);
    document.getElementById('overlay').addEventListener('click', closeExistingModal);
    const form = document.getElementById('appointmentForm');
    const formattedStartInput = document.getElementById('start_time');
    form.addEventListener('submit', function (event) {

      event.preventDefault();
      const formData = new FormData(this);
      const searchParams = new URLSearchParams(formData); // Convert form data to URL search parameters
      const queryString = searchParams.toString(); // Get the query string from the search parameters

      // Redirect to the second page with the query string
      window.location.href = '/appointmentAvailability?' + queryString;
    })


    async function getAppointmentDetails() {
      let appointmentIdElement = document.getElementById('existing-booking-id');
      let appointmentToGetDetails = appointmentIdElement.textContent.split(': ')[1];

      return fetch('/bookedTimes/' + appointmentToGetDetails, {
        method: 'GET',
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();  // Parse the response as JSON and return it
        })
        .catch((error) => {
          alert('There was an error. Please try again.');
          throw error;  // Re-throw the error so it can be caught/handled by the calling function if needed
        });
    }




  </script>
</body>

</html>