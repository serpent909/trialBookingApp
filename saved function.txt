function formatTimeSlotsWithAppointmentNumberLogic(availableSlots, appointmentNumber) {
  const appointmentTypeRules = {
    1: "type1",
    2: "type2",
    3: "type3",
    4: "type3",
    5: "type3",
    6: "type3",
    7: "type3",
    8: "type3"
  };

  // Map appointment number to type
  const appointmentType = appointmentTypeRules[appointmentNumber];


  // Sort availableSlots by type and date
  const slotsByTypeAndDate = availableSlots.reduce((slots, slot) => {

    const date = slot.start_time.split(' ')[0];
    if (!slots[slot.type]) slots[slot.type] = {};
    if (!slots[slot.type][date]) slots[slot.type][date] = [];
    slots[slot.type][date].push(slot);

    return slots;
  }, {});



  // Check if a slot is valid given the appointment rules
  const checkSlot = (slot, type, offset, duration) => {

    const slotStart = new Date(slot.start_time);
    const slotEnd = new Date(slot.end_time);
    const requiredStart = new Date(slotStart.getTime() + offset * 60000);
    const requiredEnd = new Date(requiredStart.getTime() + duration * 60000);

    return requiredEnd <= slotEnd;
  };

  // Get all valid slots
  const validSlots = [];
  for (const type in slotsByTypeAndDate) {
    for (const date in slotsByTypeAndDate[type]) {
      slotsByTypeAndDate[type][date].forEach((slot) => {
        const rules = appointmentRules[appointmentType];
        const resources = ['researcher', 'nurse', 'psychologist', 'room']; // Adjust to your needs
        const isValid = resources.every(resource => {
          const resourceKey = resource.charAt(0).toUpperCase() + resource.slice(1, -6);
          const isOffset = resource.endsWith('Offset');
          const isDuration = resource.endsWith('Duration');

          if (isOffset || isDuration) {
            const offsetKey = `${resourceKey.toLowerCase()}Offset`;
            const durationKey = `${resourceKey.toLowerCase()}Duration`;

            const offset = rules[offsetKey];
            const duration = rules[durationKey];

            if (slotsByTypeAndDate[resourceKey] && slotsByTypeAndDate[resourceKey][date]) {
              return slotsByTypeAndDate[resourceKey][date].some(s => checkSlot(s, resourceKey, offset, duration));
            }
          }
          // If the current resource does not require checking, treat it as "pass"
          return false;
        });

        if (isValid) {

          if (appointmentType == "type1") {
            validSlots.push({
              start_time: slot.start_time,
              end_time: moment(slot.start_time).add(Math.max(...resources.map(r => rules[`${r}Offset`] + rules[`${r}Duration`])), 'minutes').format('YYYY-MM-DD HH:mm'),
              researcher_id: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].id : null,
              researcher_name: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].name : null,
              nurse_id: slotsByTypeAndDate['Nurse'][date] ? slotsByTypeAndDate['Nurse'][date][0].id : null,
              nurse_name: slotsByTypeAndDate['Nurse'][date] ? slotsByTypeAndDate['Nurse'][date][0].name : null,
              room_id: null,
              room_name: null,
              psychologist_id: null,
              psychologist_name: null,
            });

          } else if (appointmentType == "type2") {
            validSlots.push({
              start_time: slot.start_time,
              end_time: moment(slot.start_time).add(Math.max(...resources.map(r => rules[`${r}Offset`] + rules[`${r}Duration`])), 'minutes').format('YYYY-MM-DD HH:mm'),
              researcher_id: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].id : null,
              researcher_name: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].name : null,
              nurse_id: slotsByTypeAndDate['Nurse'][date] ? slotsByTypeAndDate['Nurse'][date][0].id : null,
              nurse_name: slotsByTypeAndDate['Nurse'][date] ? slotsByTypeAndDate['Nurse'][date][0].name : null,
              room_id: slotsByTypeAndDate['Room'][date] ? slotsByTypeAndDate['Room'][date][0].id : null,
              room_name: slotsByTypeAndDate['Room'][date] ? slotsByTypeAndDate['Room'][date][0].name : null,
              psychologist_id: slotsByTypeAndDate['Psychologist'][date] ? slotsByTypeAndDate['Psychologist'][date][0].id : null,
              psychologist_name: slotsByTypeAndDate['Psychologist'][date] ? slotsByTypeAndDate['Psychologist'][date][0].name : null,
            });

          } else if (appointmentType == "type3") {
            validSlots.push({
              start_time: slot.start_time,
              end_time: moment(slot.start_time).add(Math.max(...resources.map(r => rules[`${r}Offset`] + rules[`${r}Duration`])), 'minutes').format('YYYY-MM-DD HH:mm'),
              researcher_id: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].id : null,
              researcher_name: slotsByTypeAndDate['Researcher'][date] ? slotsByTypeAndDate['Researcher'][date][0].name : null,
              nurse_id: null,
              nurse_name: null,
              room_id: slotsByTypeAndDate['Room'][date] ? slotsByTypeAndDate['Room'][date][0].id : null,
              room_name: slotsByTypeAndDate['Room'][date] ? slotsByTypeAndDate['Room'][date][0].name : null,
              psychologist_id: slotsByTypeAndDate['Psychologist'][date] ? slotsByTypeAndDate['Psychologist'][date][0].id : null,
              psychologist_name: slotsByTypeAndDate['Psychologist'][date] ? slotsByTypeAndDate['Psychologist'][date][0].name : null,
            });

          }
        }
      });
    }
  }
  console.log(validSlots)
  return validSlots;
}